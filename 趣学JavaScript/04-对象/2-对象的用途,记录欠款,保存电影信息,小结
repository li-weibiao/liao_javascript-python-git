4.6 对象的用途
在了解了创建对象以及为他们添加属性的几种不同方法之后，让我们来尝试一些简单的程序，以应用所学到的知识。

4.6.1 记录欠款
可以使用对象作为把字符串和值连接到一起的方法。
在这个示例中，字符串是朋友们的名字，值是他们所欠的钱。
var owedMoney = {};
owedMoney["漩涡鸣人"] = 5;
owedMoney["拉姆"] = 7;
owedMoney["漩涡鸣人"];
5

现在，假设漩涡鸣人借了更多的钱，我们可以更新对象，使用前面介绍过的+=操作符，给漩涡鸣人欠钱的数额加上3。
owedMoney["漩涡鸣人"] += 3;
owedMoney["漩涡鸣人"];
8

这就像是编写了owedMoney["漩涡鸣人"] = owedMoney["漩涡鸣人"]  + 3。还可以查看整个对象，看看朋友们分别欠了多少钱。
owedMoney;
{漩涡鸣人: 8, 拉姆: 7}

4.6.2 保存电影信息
可以创建保存电影的一个对象，每个键就是一部电影的名称，每一个值是另一个对象，其中包含了电影的相关信息。对象中的值本身也可以是对象。
var movies = {
  "火影忍者2021 大电影":{
    releaseDate:2021,
	duration:100,
	actors:["漩涡鸣人", "宇智波佐助"],
	format:"DVD"
},
  "哆啦A梦2021 大电影":{
	releaseDate:2021,
	duration:100,
	actors:["野比大雄", "哆啦A梦"],
	format:"DVD"
}
};

对于电影名称（外围对象的键），我们使用了引号，但是内部对象的键没有使用引号，这是因为电影名称包含了空格。

现在想要查看电影的信息时，很容易就可以找到。
var findingHuoYing = movies["火影忍者2021大电影"];
findingHuoYing.actors;
["漩涡鸣人", "宇智波佐助"]

也可以把新的电影添加进去。
var ultlm = {
  releaseDate:2021,
  duration:100,
  actors:["塞罗奥特曼", "杰克奥特曼"],
  format:"DVD"
};
movies["奥特曼大电影 2021"] = ultlm;

这里创建了一个新的对象来保存ultlm这部电影的相关信息，然后将其插入到movies对象中，其键为"奥特曼大电影 2021"。

我们可以使用Object.keys()将所有的电影的名称都列出来。
Object.keys(movies);
["火影忍者2021大电影", "哆啦A梦2021大电影", "奥特曼大电影 2021"]

4.7 小结
对象和数组很相似，因为可以使用对象把多条信息保存到一个单元中。二者之间的主要区别是，对象使用字符串来访问元素，而数组使用数字来访问元素。
因此，数组是有序的，而对象是无序的。
