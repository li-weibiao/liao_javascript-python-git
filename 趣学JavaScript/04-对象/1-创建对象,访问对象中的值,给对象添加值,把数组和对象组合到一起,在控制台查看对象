第4章 对象
JavaScript中的对象和数组非常类似，但是对象使用字符串而不是数字来访问不同的元素。
这个字符串叫做键或者属性，它所指向的元素叫做值。
把这两种信息结合在一起叫做键-值对。
数组最常用于表示多个事物的列表，而对象经常用于表示具有多个特征或属性的单个事物。

4.1 创建对象
我们通过创建JavaScript对象来保存一种动物的许多信息。下面的对象保存了一只名为Har的三只脚的猫的信息。
var cat = {

  "legs": 3,
  
  "name": "Har",
  
  "color": "Blue"

};

在这里，我们创建了一个名为cat的变量，并把带有3个键值对的对象赋值给它。要创建对象，需要使用花括号{}，而不是用于生成数组的方括号。
在花括号中，输入键值对。把花括号以及其中的内容叫做对象字面值。
对象字面值是通过一次性写出完整的对象来创建对象的一种方法。

注意：我们还介绍过数组字面值（例如["a", "b", "c"]），数字字面值（例如37），字符串字面值（例如"moon"）和不二字面值（例如true和false）。
字面值只是表示整个值都是一次性写出来的，而不是分多个步骤构建的。

键值对当中，键总是字符串，而值可以是任何类型。

当创建对象时，冒号（:）前边放的是键，冒号（:）右边放的是值。冒号的作用有点像是等号，就像创建变量的时候一样，把冒号右边的值赋值给左边的名称。
每个键值对之间，必须放一个逗号。请注意，最后一个键值对的后边不需要逗号。因为它是最后一个键值对，所以后边紧跟着的是右花括号，而不是逗号。

JavaScript知道键总是字符串，这就是键可以不带引号的原因。不过，不带引号的键要遵循与变量名称相同的规则：不带引号的键中不允许有空格。如果把键放在引号中，那就允许有空格。

请注意，键总是字符串（不管带引号还是不带引号），但是键对应的值可以是各种类型的值，甚至可以是包含值的变量。

4.2 访问对象中的值
可以像数组一样，使用方括号来访问对象中的值。唯一不同的是，数组使用的是索引（数字），而对象使用的是键（字符串）。
cat["name"];  //沿用上面设置的猫变量
"Har"

就像创建对象字面值一样，当药访问对象中的键时，键是否带引号也是可选的。然而，如果使用引号，代码看上去会稍有不同：
cat.name;
"Har"

上面这种形式叫做点符号。我们只是在键后边使用了一个圆点，没有使用引号；而不是在对象名称后边的方括号中输入带引号的键。
与对象字面值中不带引号的键一样，只有键中不包含任何特殊字符（例如空格）的时候，才能使用点符号。

假设想要获取一个对象中的所有键的列表，而不是想通过输入键来查找值。JavaScript提供了一种简单的方法来做到这点，即使用Object.keys():
Object.keys(cat);
["legs", "name", "color"]

Object.keys(anyObject)返回了包含anyObject对象的所有键的一个数组。

4.3 给对象添加值
空的对象就像一个空的数组，只是它使用的是花括号（{}），而不是方括号（[]），可以像为数组添加元素一样，来为对象添加元素，但我们使用字符串而不是数字，如下所示：
var asuka = {};

asuka["age"] = 14;

asuka["name"] = "asuka";

asuka["from"] = "新世纪福音战士";

asuka;

{age: 14, name: "asuka", from: "新世纪福音战士"}

要注意键值对在浏览器中显示是无序的。

数组显然有一定的顺序：索引0在索引1之前，索引3在索引2之后。但是，对于对象，没有明显的方法对每个项进行排序。因此，不要编写依赖于对象的键的准确顺序的程序。

当添加新的键的时候，也可以使用点符号：
var asuka = {};

asuka.name = "asuka";

asuka.age = 14;

asuka;

{name: "asuka", age: 14}

如果查看JavaScript所不知道的属性，它会返回一个特定的值，undefined。undefined只是表示“这里什么都没有”。

4.4 把数组和对象组合到一起
在数组或者对象中，可以使用另一个数组或者对象作为其值。
var comicName = [
    
  {name: "漩涡鸣人", from: "火影忍者"},
    
  {name:"艾米莉亚", from:"从零开始的异世界生活"}

];

comicName;
0: {name: "漩涡鸣人", from: "火影忍者"}
1: {name: "艾米莉亚", from: "从零开始的异世界生活"}
length: 2

要得到第一个动漫的所有信息，可以使用索引的方式：
comicName[0];

{name: "漩涡鸣人", from: "火影忍者"}

如果只是想要得到第一个动漫人物的名字，可以在数组索引后边的方括号中添加对象的键：
comicName[0]["name"];

"漩涡鸣人"

或者，可以使用点符号：
comicName[0].from;

"火影忍者"

注意：只能针对对象使用点符号，而不能对数组使用点符号。

我们来创建一个更复杂的例子，对象中包括数组，数组中还包括数组的例子。
var nanuto = {name:"漩涡鸣人", age:11, luckyNumbers:[2,4,6]};

var asuka = {name:"明日香", age:14, luckyNumbers:[3,9,11]};

首先创建2个对象，并且把2个对象分别保存到名为nanuto，asuka的变量中。
每个对象有3个键：name，age，luckyNumbers。
为name键赋值一个字符串，为age键赋值一个数值，为 luckyNumbers键赋值一个包含不同数字的数组。

接下来创建friends数组：
var friends = [nanuto, asuka];

friends数组拥有2个元素（对象），可以使用这些对象在数组中的索引来访问它们：
friends[0];

{name: "漩涡鸣人", age: 11, luckyNumbers: Array(3)}

对于luckyNumbers数组，浏览器会输出Array(3)，表示“这是拥有3个元素的一个数组”。
我们还可以在方括号中输入对象的索引，并且在其后跟着想要的键，从而检索对象中的一个值：
friends[0]["name"];

"漩涡鸣人"

或者是：
friends[0].name;

"漩涡鸣人"

甚至可以获取friends数组中的一个对象之中的数组值：
friends[0].luckyNumbers[1];

4

4.5 在控制台查看对象
Chrome允许深入研究在控制台输出的对象。

在浏览器中，左边的三角形表示这个对象可以展开。

proto属性，和对象的原型有关。

