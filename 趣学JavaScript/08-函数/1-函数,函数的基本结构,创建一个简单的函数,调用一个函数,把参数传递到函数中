第8章 函数
函数是把代码集合到一起以便能够复用它们的一种方法。
函数允许我们在程序中的多个位置运行相同的代码段，而无需重复的复制和黏贴。

代码分割的越小，分割的块越容易管理，就越能让我们看到更大的蓝图，并思考如何在更高的层级上来构建程序。

当我们需要通过程序重复执行一次计算或者一种行为时，会发现函数真的很有用。

8.1 函数的基本结构
例如：
function () {
  console.log("Do something");  //位于花括号之间的函数体
}

花括号之间的代码叫做函数体，这就像循环中花括号之间的代码叫做循环体一样。

8.2 创建一个简单的函数
var ourFirstFunction = function () { console.log("Hello world!");};

这些代码创建了一个新的函数，并且把它保存到了变量 ourFirstFunction中。

8.3 调用一个函数
要运行函数中的代码（函数体），需要调用该函数。
要调用一个函数，在函数名称后边跟随一对圆括号。
ourFirstFunction();
Hello world!
undefined

在这个示例中，返回值是undefined，返回值就是函数输出的值，可以在代码中的其他地方使用。

8.4 把参数传递到函数中
函数允许在调用函数的时候，把值传递到函数中，以改变函数的行为。当创建函数和调用函数时，参数总是位于函数的括号之中。
var sayHelloTo = function (name) { console.log("Hello " + name + "!");};

调用这个带有一个参数的函数，把想要用作参数的值放在位于函数名称之后的圆括号中。例如，与asuka打招呼。
sayHelloTo('asuka');  //asuka是字符串，注意加引号
Hello asuka!



